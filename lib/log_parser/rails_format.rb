# Generate with
# Autogenerated from a Treetop grammar. Edits may be lost.


# tt rails_format.treetop

module RailsFormat
  include Treetop::Runtime

  def root
    @root ||= :log_line
  end

  module LogLine0
    def time
      elements[0]
    end

    def pid
      elements[2]
    end

    def severity
      elements[4]
    end

    def space
      elements[5]
    end

    def any
      elements[7]
    end
  end

  def _nt_log_line
    start_index = index
    if node_cache[:log_line].has_key?(index)
      cached = node_cache[:log_line][index]
      if cached
        node_cache[:log_line][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_time
    s0 << r1
    if r1
      if (match_len = has_terminal?(' ', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\' \'')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_pid
        s0 << r3
        if r3
          if (match_len = has_terminal?(' ', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\' \'')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_severity
            s0 << r5
            if r5
              r6 = _nt_space
              s0 << r6
              if r6
                i7 = index
                r8 = _nt_start_line
                if r8
                  r8 = SyntaxNode.new(input, (index-1)...index) if r8 == true
                  r7 = r8
                else
                  r9 = _nt_user_line
                  if r9
                    r9 = SyntaxNode.new(input, (index-1)...index) if r9 == true
                    r7 = r9
                  else
                    r10 = _nt_completed
                    if r10
                      r10 = SyntaxNode.new(input, (index-1)...index) if r10 == true
                      r7 = r10
                    else
                      @index = i7
                      r7 = nil
                    end
                  end
                end
                s0 << r7
                if r7
                  r11 = _nt_any
                  s0 << r11
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(LogLine0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:log_line][start_index] = r0

    r0
  end

  module Time0
    def integer1
      elements[0]
    end

    def integer2
      elements[2]
    end

    def integer3
      elements[4]
    end

    def integer4
      elements[6]
    end

    def integer5
      elements[8]
    end

    def integer6
      elements[10]
    end
  end

  def _nt_time
    start_index = index
    if node_cache[:time].has_key?(index)
      cached = node_cache[:time][index]
      if cached
        node_cache[:time][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_integer
    s0 << r1
    if r1
      if (match_len = has_terminal?('-', false, index))
        r2 = true
        @index += match_len
      else
        terminal_parse_failure('\'-\'')
        r2 = nil
      end
      s0 << r2
      if r2
        r3 = _nt_integer
        s0 << r3
        if r3
          if (match_len = has_terminal?('-', false, index))
            r4 = true
            @index += match_len
          else
            terminal_parse_failure('\'-\'')
            r4 = nil
          end
          s0 << r4
          if r4
            r5 = _nt_integer
            s0 << r5
            if r5
              if (match_len = has_terminal?(' ', false, index))
                r6 = true
                @index += match_len
              else
                terminal_parse_failure('\' \'')
                r6 = nil
              end
              s0 << r6
              if r6
                r7 = _nt_integer
                s0 << r7
                if r7
                  if (match_len = has_terminal?(':', false, index))
                    r8 = true
                    @index += match_len
                  else
                    terminal_parse_failure('\':\'')
                    r8 = nil
                  end
                  s0 << r8
                  if r8
                    r9 = _nt_integer
                    s0 << r9
                    if r9
                      if (match_len = has_terminal?(':', false, index))
                        r10 = true
                        @index += match_len
                      else
                        terminal_parse_failure('\':\'')
                        r10 = nil
                      end
                      s0 << r10
                      if r10
                        r11 = _nt_integer
                        s0 << r11
                      end
                    end
                  end
                end
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Time0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:time][start_index] = r0

    r0
  end

  module Pid0
    def integer
      elements[1]
    end

  end

  def _nt_pid
    start_index = index
    if node_cache[:pid].has_key?(index)
      cached = node_cache[:pid][index]
      if cached
        node_cache[:pid][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('[', false, index))
      r1 = true
      @index += match_len
    else
      terminal_parse_failure('\'[\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_integer
      s0 << r2
      if r2
        if (match_len = has_terminal?(']', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\']\'')
          r3 = nil
        end
        s0 << r3
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Pid0)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:pid][start_index] = r0

    r0
  end

  def _nt_severity
    start_index = index
    if node_cache[:severity].has_key?(index)
      cached = node_cache[:severity][index]
      if cached
        node_cache[:severity][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_word

    node_cache[:severity][start_index] = r0

    r0
  end

  module StartLine0
    def http_method
      elements[1]
    end

    def request_uri
      elements[3]
    end

    def ip_addr
      elements[5]
    end
  end

  module StartLine1
    def type
      :start
    end
  end

  def _nt_start_line
    start_index = index
    if node_cache[:start_line].has_key?(index)
      cached = node_cache[:start_line][index]
      if cached
        node_cache[:start_line][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('Started ', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'Started \'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_http_method
      s0 << r2
      if r2
        if (match_len = has_terminal?(' "', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\' "\'')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_request_uri
          s0 << r4
          if r4
            if (match_len = has_terminal?('" for ', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\'" for \'')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_ip_addr
              s0 << r6
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(StartLine0)
      r0.extend(StartLine1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:start_line][start_index] = r0

    r0
  end

  module UserLine0
  end

  module UserLine1
    def type
      :user
    end
  end

  def _nt_user_line
    start_index = index
    if node_cache[:user_line].has_key?(index)
      cached = node_cache[:user_line][index]
      if cached
        node_cache[:user_line][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('Request made by ', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'Request made by \'')
      r1 = nil
    end
    s0 << r1
    if r1
      i2 = index
      r3 = _nt_anonymous_user
      if r3
        r3 = SyntaxNode.new(input, (index-1)...index) if r3 == true
        r2 = r3
      else
        r4 = _nt_user_id_login
        if r4
          r4 = SyntaxNode.new(input, (index-1)...index) if r4 == true
          r2 = r4
        else
          @index = i2
          r2 = nil
        end
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UserLine0)
      r0.extend(UserLine1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:user_line][start_index] = r0

    r0
  end

  module Completed0
    def http_status
      elements[1]
    end

    def status_str
      elements[3]
    end

    def request_time
      elements[5]
    end

  end

  module Completed1
    def type
      :completed
    end
  end

  def _nt_completed
    start_index = index
    if node_cache[:completed].has_key?(index)
      cached = node_cache[:completed][index]
      if cached
        node_cache[:completed][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('Completed ', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'Completed \'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_http_status
      s0 << r2
      if r2
        if (match_len = has_terminal?(' ', false, index))
          r3 = true
          @index += match_len
        else
          terminal_parse_failure('\' \'')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_status_str
          s0 << r4
          if r4
            if (match_len = has_terminal?(' in ', false, index))
              r5 = instantiate_node(SyntaxNode,input, index...(index + match_len))
              @index += match_len
            else
              terminal_parse_failure('\' in \'')
              r5 = nil
            end
            s0 << r5
            if r5
              r6 = _nt_request_time
              s0 << r6
              if r6
                if (match_len = has_terminal?('ms', false, index))
                  r7 = instantiate_node(SyntaxNode,input, index...(index + match_len))
                  @index += match_len
                else
                  terminal_parse_failure('\'ms\'')
                  r7 = nil
                end
                s0 << r7
              end
            end
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(Completed0)
      r0.extend(Completed1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:completed][start_index] = r0

    r0
  end

  module AnonymousUser0
    def login
      'anonymous'
    end

    def user_id
      'bgfq4qA1Gr2QjIaaaHk9wZ'
    end
  end

  def _nt_anonymous_user
    start_index = index
    if node_cache[:anonymous_user].has_key?(index)
      cached = node_cache[:anonymous_user][index]
      if cached
        node_cache[:anonymous_user][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    if (match_len = has_terminal?('anonymous user', false, index))
      r0 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      r0.extend(AnonymousUser0)
      @index += match_len
    else
      terminal_parse_failure('\'anonymous user\'')
      r0 = nil
    end

    node_cache[:anonymous_user][start_index] = r0

    r0
  end

  module UserIdLogin0
    def guid
      elements[1]
    end

    def user_login
      elements[3]
    end

  end

  module UserIdLogin1
    def login
      user_login.text_value
    end

    def user_id
      guid.text_value
    end
  end

  def _nt_user_id_login
    start_index = index
    if node_cache[:user_id_login].has_key?(index)
      cached = node_cache[:user_id_login][index]
      if cached
        node_cache[:user_id_login][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    if (match_len = has_terminal?('user with ID = "', false, index))
      r1 = instantiate_node(SyntaxNode,input, index...(index + match_len))
      @index += match_len
    else
      terminal_parse_failure('\'user with ID = "\'')
      r1 = nil
    end
    s0 << r1
    if r1
      r2 = _nt_guid
      s0 << r2
      if r2
        if (match_len = has_terminal?('"/"', false, index))
          r3 = instantiate_node(SyntaxNode,input, index...(index + match_len))
          @index += match_len
        else
          terminal_parse_failure('\'"/"\'')
          r3 = nil
        end
        s0 << r3
        if r3
          r4 = _nt_user_login
          s0 << r4
          if r4
            if (match_len = has_terminal?('"', false, index))
              r5 = true
              @index += match_len
            else
              terminal_parse_failure('\'"\'')
              r5 = nil
            end
            s0 << r5
          end
        end
      end
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(UserIdLogin0)
      r0.extend(UserIdLogin1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:user_id_login][start_index] = r0

    r0
  end

  def _nt_guid
    start_index = index
    if node_cache[:guid].has_key?(index)
      cached = node_cache[:guid][index]
      if cached
        node_cache[:guid][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[^"]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[^"]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:guid][start_index] = r0

    r0
  end

  def _nt_user_login
    start_index = index
    if node_cache[:user_login].has_key?(index)
      cached = node_cache[:user_login][index]
      if cached
        node_cache[:user_login][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[^"]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[^"]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:user_login][start_index] = r0

    r0
  end

  def _nt_http_status
    start_index = index
    if node_cache[:http_status].has_key?(index)
      cached = node_cache[:http_status][index]
      if cached
        node_cache[:http_status][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_integer

    node_cache[:http_status][start_index] = r0

    r0
  end

  def _nt_status_str
    start_index = index
    if node_cache[:status_str].has_key?(index)
      cached = node_cache[:status_str][index]
      if cached
        node_cache[:status_str][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_word

    node_cache[:status_str][start_index] = r0

    r0
  end

  def _nt_request_time
    start_index = index
    if node_cache[:request_time].has_key?(index)
      cached = node_cache[:request_time][index]
      if cached
        node_cache[:request_time][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_integer

    node_cache[:request_time][start_index] = r0

    r0
  end

  def _nt_request_uri
    start_index = index
    if node_cache[:request_uri].has_key?(index)
      cached = node_cache[:request_uri][index]
      if cached
        node_cache[:request_uri][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[^"]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[^"]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:request_uri][start_index] = r0

    r0
  end

  def _nt_http_method
    start_index = index
    if node_cache[:http_method].has_key?(index)
      cached = node_cache[:http_method][index]
      if cached
        node_cache[:http_method][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    r0 = _nt_word

    node_cache[:http_method][start_index] = r0

    r0
  end

  module IpAddr0
    def integer
      elements[1]
    end
  end

  module IpAddr1
    def integer
      elements[0]
    end

  end

  def _nt_ip_addr
    start_index = index
    if node_cache[:ip_addr].has_key?(index)
      cached = node_cache[:ip_addr][index]
      if cached
        node_cache[:ip_addr][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    i0, s0 = index, []
    r1 = _nt_integer
    s0 << r1
    if r1
      s2, i2 = [], index
      loop do
        i3, s3 = index, []
        if (match_len = has_terminal?('.', false, index))
          r4 = true
          @index += match_len
        else
          terminal_parse_failure('\'.\'')
          r4 = nil
        end
        s3 << r4
        if r4
          r5 = _nt_integer
          s3 << r5
        end
        if s3.last
          r3 = instantiate_node(SyntaxNode,input, i3...index, s3)
          r3.extend(IpAddr0)
        else
          @index = i3
          r3 = nil
        end
        if r3
          s2 << r3
        else
          break
        end
        if s2.size == 3
          break
        end
      end
      if s2.size < 3
        @index = i2
        r2 = nil
      else
        if s2.size < 3
          terminal_failures.pop
        end
        r2 = instantiate_node(SyntaxNode,input, i2...index, s2)
      end
      s0 << r2
    end
    if s0.last
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
      r0.extend(IpAddr1)
    else
      @index = i0
      r0 = nil
    end

    node_cache[:ip_addr][start_index] = r0

    r0
  end

  def _nt_integer
    start_index = index
    if node_cache[:integer].has_key?(index)
      cached = node_cache[:integer][index]
      if cached
        node_cache[:integer][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[0-9]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[0-9]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:integer][start_index] = r0

    r0
  end

  def _nt_any
    start_index = index
    if node_cache[:any].has_key?(index)
      cached = node_cache[:any][index]
      if cached
        node_cache[:any][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if index < input_length
        r1 = true
        @index += 1
      else
        terminal_parse_failure("any character")
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    r0 = instantiate_node(SyntaxNode,input, i0...index, s0)

    node_cache[:any][start_index] = r0

    r0
  end

  def _nt_word
    start_index = index
    if node_cache[:word].has_key?(index)
      cached = node_cache[:word][index]
      if cached
        node_cache[:word][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if has_terminal?(@regexps[gr = '\A[\\w]'] ||= Regexp.new(gr), :regexp, index)
        r1 = true
        @index += 1
      else
        terminal_parse_failure('[\\w]')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:word][start_index] = r0

    r0
  end

  def _nt_space
    start_index = index
    if node_cache[:space].has_key?(index)
      cached = node_cache[:space][index]
      if cached
        node_cache[:space][index] = cached = SyntaxNode.new(input, index...(index + 1)) if cached == true
        @index = cached.interval.end
      end
      return cached
    end

    s0, i0 = [], index
    loop do
      if (match_len = has_terminal?(' ', false, index))
        r1 = true
        @index += match_len
      else
        terminal_parse_failure('\' \'')
        r1 = nil
      end
      if r1
        s0 << r1
      else
        break
      end
    end
    if s0.empty?
      @index = i0
      r0 = nil
    else
      r0 = instantiate_node(SyntaxNode,input, i0...index, s0)
    end

    node_cache[:space][start_index] = r0

    r0
  end

end

class RailsFormatParser < Treetop::Runtime::CompiledParser
  include RailsFormat
end

